import React, { Fragment, useEffect, useState } from "react";
import { bindActionCreators } from "redux";
import { actions as exerciseActions } from "../../../../reducers/lab10/ExerciseReducer";
import PropTypes from "prop-types";
import { connect } from "react-redux";
import Simulation from "../components/Simulation";
import KeyboardGuide from "../components/KeyboardGuide";
import { MIN_USER_ATTEMPTS } from "../../../../constants/lab10";
import useScroll from "../../../../use-hooks/useScroll";

const TrainingAI = (props) => {
  useScroll();
  const [limitReached, setLimitReach] = useState(false);

  /**
   * Update state if the minimum amount user attempts has been reached
   */
  useEffect(() => {
    if (props.userAttempts >= MIN_USER_ATTEMPTS && !limitReached) {
      setLimitReach(true);
      props.actions.disableUserInput();
      props.actions.coverSimulation();
    }
  }, [props.userAttempts]);

  return (
    <div>
      {!props.simulationStarted && (
        <div>
          {limitReached ? (
            <Fragment>
              <p className={"playthrough__sentence"}>
                Awesome, it works. Next, you need to generate data for the
                neural network. This data can be generated by training the AI to
                avoid the falling shapes, which will be your goal for this phase
                of the exercise. <br />
                You will be given {props.trainingDuration} seconds to avoid the
                falling the shapes.
              </p>
              <div>
                <p className={"tw-text-xl tw-font-bold"}>
                  Click <i>Start</i> to commence the training exercise.
                </p>
              </div>
            </Fragment>
          ) : (
            <Fragment>
              <div>
                <p className={"tw-text-xl tw-font-bold"}>
                  Again, try to move the object using the on-screen buttons or
                  your keyboard.
                </p>
              </div>
            </Fragment>
          )}
        </div>
      )}
      {props.simulationStarted && (
        <div>
          <div>
            <p className={"tw-text-xl tw-font-bold"}>
              Avoid the falling shapes.
            </p>
          </div>
        </div>
      )}
      <Simulation />
      <KeyboardGuide />
    </div>
  );
};

const mapStateToProps = (state) => {
  const {
    userAttempts,
    trainingDuration,
    simulationCovered,
    simulationStarted,
  } = state.exercise10;
  return {
    userAttempts,
    trainingDuration,
    simulationCovered,
    simulationStarted,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    actions: bindActionCreators({ ...exerciseActions }, dispatch),
  };
};

TrainingAI.propTypes = {
  userAttempts: PropTypes.number,
  trainingDuration: PropTypes.number,
  simulationCovered: PropTypes.bool,
  simulationStarted: PropTypes.bool,
  actions: PropTypes.object,
};

export default connect(mapStateToProps, mapDispatchToProps)(TrainingAI);
